%% GSA_FAST_GetSi: calculate the FAST sensitivity indices for multi-output systems
% Ref: Cukier, R.I., C.M. Fortuin, K.E. Shuler, A.G. Petschek and J.H.
% Schaibly (1973). Study of the sensitivity of coupled reaction systems to uncertainties in rate coefficients. I Theory. Journal of Chemical Physics 
%
% Max number of input variables: 50
%
% Usage:
%   Si = GSA_FAST_GetSi(pro)
%
% Inputs:
%    pro                project structure
%
% Output:
%    Si                 vector of first order sensitivity coefficients for
%                       sets comprising only a single input variable at a
%                       time
%
% ------------------------------------------------------------------------
% Citation: Cannavo' F., Sensitivity analysis for volcanic source modeling quality assessment and model selection, Computers & Geosciences, Vol. 44, July 2012, Pages 52-59, ISSN 0098-3004, http://dx.doi.org/10.1016/j.cageo.2012.03.008.
% See also
%
% Author : Simon Johnstone-Robertson
%
% Release: 1.0
% Date   : 01-06-2015
%
% History:
% 1.0  01-06-2015  First release.
%%
 

function [Si,pro] = GSA_FAST_GetSi_MultiOut(pro)

% retrieve the number of input variables
n = length(pro.Inputs.pdfs);

% set the number of discrete intervals for numerical integration of (13)
% increasing this parameter makes the numerical integration more precise
M = 10;

% read the table of incommensurate frequencies for k variables
W = fnc_FAST_getFreqs(n);

% set the maximum integer frequency
Wmax = W(n);

% calculate the Nyquist frequency and multiply it for the number of
% intervals
N = 2*M*Wmax+1;

q = (N-1)/2;

% set the variable of integration
S = pi/2*(2*(1:N)-N-1)/N;
alpha = W'*S;

% calculate the new input variables, see (10)
NormedX = 0.5 + asin(sin(alpha'))/pi;

% retrieve the corresponding inputs for the new input variables. 
X = fnc_FAST_getInputs(pro, NormedX);

% Store the sample set in the project structure array
pro.SampleSets.X = X;

% Parfor loop requirements
model_function_handle = pro.Model.handle;
fX_cell = cell(N,1);

% Evaluate the model at the sample points in set X
parfor j=1:N
    fX_cell{j} = feval(model_function_handle,X(j,:)); % the function output must be a single variable that takes the form of a row vector
end

% Convert the cell array to a numeric array
fX = cell2mat(fX_cell); % this will only work if all output generated by the function is numeric

% Store simulation results in the project structure array
pro.GSA.fX = fX;

A = zeros(N,size(fX,2));
B = zeros(N,size(fX,2));
N0 = q+1;
Si = NaN(size(fX,2),n);

% Calculate the sensitivity indices of each input variable for all outcome variables
for output = 1:size(fX,2)
    % compute the real part of the Fourier coefficients
    for j=2:2:N
        A(j,output) = 1/N*(fX(N0,output)+(fX(N0+(1:q),output)+fX(N0-(1:q),output))'* ...
            cos(pi*j*(1:q)/N)');
    end

    % compute the imaginary part of the Fourier coefficients
    for j=1:2:N
        B(j,output) = 1/N*(fX(N0+(1:q),output)-fX(N0-(1:q),output))'* ...
            sin(pi*j*(1:q)/N)';
    end

    % compute the total variance by summing the squares of the Fourier
    % coefficients
    V = 2*(A(:,output)'*A(:,output)+B(:,output)'*B(:,output));

    % calculate the sensitivity coefficients for each input variable
    for i=1:n
        Vi=0;
        for j=1:M
            % numerical integration (13) 
            Vi = Vi+A(j*W(i),output)^2+B(j*W(i),output)^2;
        end
        Vi = 2*Vi;
        % set the global first order sensitivity coefficient
        Si(output,i) = Vi/V;
    end
end